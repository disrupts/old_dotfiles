# Functions from xfausto at github.com/xfausto/dotfiles

# show 256 colours:
function 256co() {
  perl -e 'foreach $i (0..255) {printf("\e[38;5;$i"."m%03d\e[0m ",$i); }'
}

# go up X amount of directories:
function up(){
  local arg=${1:-1};
  while [ $arg -gt 0 ]; do
    cd .. >&/dev/null;
    arg=$(($arg - 1));
  done
}

# jump to previous directory:
function back() {
  pushd -q -$1
}

# (adopted) copy and follow file to new dir:
function cpf () {
if [[ -d $*[-1] ]]; then
  cp $* && cd $*[-1]
elif [[ -d ${*[-1]%/*} ]]; then
  cp $* && cd ${*[-1]%/*}
fi
}

# (adopted) move and follow file to new dir:
function mvf () {
if [[ -d $*[-1] ]]; then
  mv $* && cd $*[-1]
elif [[ -d ${*[-1]%/*} ]]; then
  mv $* && cd ${*[-1]%/*}
fi
}

# make folder and chdir into it:
function mkcd() {
  mkdir -p "$@"
  cd "$@"
}

# copy and backup
function cpb () {
  cp "$@"{,.back}
}

# extract archive with preferred options:
function extr() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) unrar e $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *.xz) unxz -vk $1 ;;
      *.lzma) unlzma -vk $1 ;;
      *) echo "'$1' cannot be extracted via extr()" ;;
    esac
  else
    echo "'$1' is not a valid file"
fi
}

# The following need updating to the current OS & init system
# {start,stop,restart} daemon:
function rcstart() {
  sudo /etc/rc.d/$1 start;
}
function rcstop() {
  sudo /etc/rc.d/$1 stop;
}
function rcrestart() {
  sudo /etc/rc.d/$1 restart;
}

# Not very useful in OpenBSD
# reload a linux module:
function reprobe() {
  sudo modprobe -r $1
  sudo modprobe $1
}

# I should check how to use it, seems useful
# un-smart function for his todo lists:
n() {
    local arg files=(); for arg; do files+=( ~/".notes/$arg" ); done
    ${EDITOR} "${files[@]}"
}

nls() {
    tree -CR --noreport $HOME/.notes | awk '{
        if (NF==1) print $1;
        else if (NF==2) print $2;
        else if (NF==3) printf "  %s\n", $3
        }'
}

# Linux ifconfig based, needs an OpenBSD twin
#netinfo - shows network information for your system
function netinfo ()
{
echo "--------------- Network Information ---------------"
/sbin/ifconfig | awk /'inet addr/ {print $2}'
/sbin/ifconfig | awk /'Bcast/ {print $3}'
/sbin/ifconfig | awk /'inet addr/ {print $4}'
/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
echo "${myip}"
echo "---------------------------------------------------"
}

# simple status info
status() {
     print
     print "Date..: "$(date "+%Y-%m-%d %H:%M:%S")
     print "Shell.: Zsh $ZSH_VERSION (PID = $$, $SHLVL nests)"
     print "Term..: $TTY ($TERM), ${BAUD:+$BAUD bauds, }$COLUMNS x $LINES chars"
     print "Login.: $LOGNAME (UID = $EUID) on $HOST"
     print "System: $(cat /etc/[A-Za-z]*[_-][rv]e[lr]*)"
     print "Uptime: $(uptime)"
     print
}

# Linux based, needs an OpenBSD twin
seteq(){
    amixer -D equal -q set '01. 31 Hz' $1
    amixer -D equal -q set '02. 63 Hz' $2
    amixer -D equal -q set '03. 125 Hz' $3
    amixer -D equal -q set '04. 250 Hz' $4
    amixer -D equal -q set '05. 500 Hz' $5
    amixer -D equal -q set '06. 1 kHz' $6
    amixer -D equal -q set '07. 2 kHz' $7
    amixer -D equal -q set '08. 4 kHz' $8
    amixer -D equal -q set '09. 8 kHz' $9
    amixer -D equal -q set '10. 16 kHz' ${10}
}

Speakers()    { seteq 80 70 65 60 60 60 60 80 80 80; }
Notebook()     { seteq 00 75 75 70 50 50 60 70 85 85; }
Disable()   { seteq 66 66 66 66 66 66 66 66 66 66; }
rocks ()  { seteq 91 67 39 36 37 47 53 63 67 75: }

# Any function (lists any running instance of a program)
any() {
    emulate -L zsh
    unsetopt KSH_ARRAYS
    if [[ -z "$1" ]] ; then
        echo "any - grep for process(es) by keyword" >&2
        echo "Usage: any " >&2 ; return 1
    else
        ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
    fi
}

# reload zshrc
function src()
{
        autoload -U zrecompile
                [ -f ~/.zshrc ] && zrecompile -p ~/.zshrc
                [ -f ~/.zcompdump ] && zrecompile -p ~/.zcompdump
                [ -f ~/.zcompdump ] && zrecompile -p ~/.zcompdump
                [ -f ~/.zshrc.zwc.old ] && rm -f ~/.zshrc.zwc.old
                [ -f ~/.zcompdump.zwc.old ] && rm -f ~/.zcompdump.zwc.old
                source ~/.zshrc

}

# find colored
f() {
        find . -iregex ".*$@.*" -printf '%P\0' | xargs -r0 ls --color=auto -1d
}

# Nice, I don't know what I'll use it for, but I like it
# Scratch directory
function new-scratch {
  cur_dir="$HOME/scratch"
  new_dir="$HOME/tmp/scratch-`date +'%s'`"
  mkdir -p $new_dir
  ln -nfs $new_dir $cur_dir
  cd $cur_dir
  echo "New scratch dir ready for grinding ;>"
}

# Look busy
random_hex() { for i in $(seq 1 2); do echo -n $(echo "obase=16; $(($RANDOM # % 16))" | bc | tr '[A-Z]' '[a-z]'); done; }
look_busy() { clear; while true; do head -n 500 /dev/urandom | hexdump -C | grep --color=auto "`random_hex` `random_hex`"; done; }

